{"remainingRequest":"/Users/zuber/Desktop/document/company/mobile_ts/node_modules/babel-loader/lib/index.js!/Users/zuber/Desktop/document/company/mobile_ts/node_modules/ts-loader/index.js??ref--13-2!/Users/zuber/Desktop/document/company/mobile_ts/src/vuex/modules/locate/locate.action.ts","dependencies":[{"path":"/Users/zuber/Desktop/document/company/mobile_ts/src/vuex/modules/locate/locate.action.ts","mtime":1541555675214},{"path":"/Users/zuber/Desktop/document/company/mobile_ts/node_modules/cache-loader/dist/cjs.js","mtime":1540785597449},{"path":"/Users/zuber/Desktop/document/company/mobile_ts/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zuber/Desktop/document/company/mobile_ts/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import api from './locate.api';\nimport * as types from './locate.types';\nimport { ActionBuilder } from '../../action.common';\nvar AMap = window.AMap;\n\nvar locateCurrentCity = function locateCurrentCity(_ref) {\n  var commit = _ref.commit;\n  commit(types.LOCATING_CURRENT_CITY);\n  var geo = new AMap.CitySearch();\n  geo.getLocalCity(function (status, result) {\n    if (status === 'complete' && result.info === 'OK') {\n      commit(types.LOCATING_CURRENT_CITY_SUCCESS, {\n        city: result.city\n      });\n    } else {\n      commit(types.LOCATING_CURRENT_CITY_FAIL, {\n        err: result\n      });\n    }\n  });\n};\n\nvar getGeoLocation = function getGeoLocation(_ref2) {\n  var commit = _ref2.commit;\n  commit(types.LOCATING_CURRENT_POSITION);\n  var geo = new AMap.Geolocation({\n    enableHighAccuracy: true,\n    timeout: 10000\n  });\n  geo.getCurrentPosition(function (status, result) {\n    if (status === 'complete' && result.info === 'SUCCESS') {\n      commit(types.LOCATING_CURRENT_POSITION_SUCCESS, {\n        location: result\n      });\n    } else {\n      commit(types.LOCATING_CURRENT_POSITION_ERROR, {\n        err: result\n      });\n    }\n  });\n};\n\nvar setCurrentCity = ActionBuilder({\n  actionSuccess: types.LOCATING_CURRENT_CITY_SUCCESS\n});\nvar searchAddressByKeyword = ActionBuilder({\n  method: api.searchAddress,\n  actionStart: types.SEARCHING_SUGGESTED_ADDRESSES,\n  actionSuccess: types.SEARCHING_SUGGESTED_ADDRESSES_SUCCESS,\n  actionFail: types.SEARCHING_SUGGESTED_ADDRESSES_FAIL\n});\nexport default {\n  actions: {\n    getGeoLocation: getGeoLocation,\n    searchAddressByKeyword: searchAddressByKeyword,\n    locateCurrentCity: locateCurrentCity,\n    setCurrentCity: setCurrentCity\n  }\n};",{"version":3,"sources":["/Users/zuber/Desktop/document/company/mobile_ts/src/vuex/modules/locate/locate.action.ts"],"names":[],"mappings":"AACA,OAAO,GAAP,MAAgB,cAAhB;AACA,OAAO,KAAK,KAAZ,MAAuB,gBAAvB;AACA,SAAS,aAAT,QAA8B,qBAA9B;AAMA,IAAM,OAAO,OAAO,IAApB;;AAEA,IAAM,oBAAoB,SAApB,iBAAoB,OAA8C;AAAA,MAA5C,MAA4C,QAA5C,MAA4C;AACpE,SAAO,MAAM,qBAAb;AACA,MAAI,MAAM,IAAI,KAAK,UAAT,EAAV;AACA,MAAI,YAAJ,CAAiB,UAAC,MAAD,EAAiB,MAAjB,EAAgC;AAC7C,QAAI,WAAW,UAAX,IAAyB,OAAO,IAAP,KAAgB,IAA7C,EAAmD;AAC/C,aAAO,MAAM,6BAAb,EAA4C;AACxC,cAAM,OAAO;AAD2B,OAA5C;AAGH,KAJD,MAIO;AACH,aAAO,MAAM,0BAAb,EAAyC;AACrC,aAAK;AADgC,OAAzC;AAGH;AACJ,GAVD;AAWH,CAdD;;AAgBA,IAAM,iBAAiB,SAAjB,cAAiB,QAA8C;AAAA,MAA5C,MAA4C,SAA5C,MAA4C;AACjE,SAAO,MAAM,yBAAb;AACA,MAAI,MAAM,IAAI,KAAK,WAAT,CAAqB;AAC3B,wBAAoB,IADO;AAE3B,aAAS;AAFkB,GAArB,CAAV;AAIA,MAAI,kBAAJ,CAAuB,UAAC,MAAD,EAAiB,MAAjB,EAAmD;AACtE,QAAI,WAAW,UAAX,IAAyB,OAAO,IAAP,KAAgB,SAA7C,EAAwD;AACpD,aAAO,MAAM,iCAAb,EAAgD;AAC5C,kBAAU;AADkC,OAAhD;AAGH,KAJD,MAIO;AACH,aAAO,MAAM,+BAAb,EAA8C;AAC1C,aAAK;AADqC,OAA9C;AAGH;AACJ,GAVD;AAWH,CAjBD;;AAmBA,IAAM,iBAAiB,cAAc;AACjC,iBAAe,MAAM;AADY,CAAd,CAAvB;AAIA,IAAM,yBAAyB,cAAc;AACzC,UAAQ,IAAI,aAD6B;AAEzC,eAAa,MAAM,6BAFsB;AAGzC,iBAAe,MAAM,qCAHoB;AAIzC,cAAY,MAAM;AAJuB,CAAd,CAA/B;AAOA,eAAe;AACX,WAAS;AACL,kCADK;AAEL,kDAFK;AAGL,wCAHK;AAIL;AAJK;AADE,CAAf","sourcesContent":["import { ActionContext } from 'vuex'\nimport api from './locate.api'\nimport * as types from './locate.types'\nimport { ActionBuilder } from '../../action.common'\nimport { GeoLocation, GeoError } from './locate.model'\nimport { LocateState } from './locate.store'\n\ndeclare const window: Window & { AMap: any }\n\nconst AMap = window.AMap\n\nconst locateCurrentCity = ({commit}: ActionContext<LocateState, any>) => {\n    commit(types.LOCATING_CURRENT_CITY)\n    let geo = new AMap.CitySearch()\n    geo.getLocalCity((status: string, result: any) => {\n        if (status === 'complete' && result.info === 'OK') {\n            commit(types.LOCATING_CURRENT_CITY_SUCCESS, {\n                city: result.city\n            })\n        } else {\n            commit(types.LOCATING_CURRENT_CITY_FAIL, {\n                err: result\n            })\n        }\n    })\n}\n\nconst getGeoLocation = ({commit}: ActionContext<LocateState, any>) => {\n    commit(types.LOCATING_CURRENT_POSITION)\n    let geo = new AMap.Geolocation({\n        enableHighAccuracy: true,\n        timeout: 10000\n    })\n    geo.getCurrentPosition((status: string, result: GeoLocation | GeoError) => {\n        if (status === 'complete' && result.info === 'SUCCESS') {\n            commit(types.LOCATING_CURRENT_POSITION_SUCCESS, {\n                location: result\n            })\n        } else {\n            commit(types.LOCATING_CURRENT_POSITION_ERROR, {\n                err: result\n            })\n        }\n    })\n}\n\nconst setCurrentCity = ActionBuilder({\n    actionSuccess: types.LOCATING_CURRENT_CITY_SUCCESS\n})\n\nconst searchAddressByKeyword = ActionBuilder({\n    method: api.searchAddress,\n    actionStart: types.SEARCHING_SUGGESTED_ADDRESSES,\n    actionSuccess: types.SEARCHING_SUGGESTED_ADDRESSES_SUCCESS,\n    actionFail: types.SEARCHING_SUGGESTED_ADDRESSES_FAIL\n})\n\nexport default {\n    actions: {\n        getGeoLocation,\n        searchAddressByKeyword,\n        locateCurrentCity,\n        setCurrentCity\n    }\n}\n"],"sourceRoot":""}]}